package UNO;


import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sun.media.jfxmedia.events.PlayerTimeListener;

import clientInterfaces.gameControllerInterface;

/**
 *
 * @author Pieter Vanderhaegen
 */
public class UnoGame {
	
	private ArrayList<Player> players;
    private ArrayList<Card> pile;
    private ArrayList<Card> deck;

    private int myPlayDirection, currentPlayer;
    private int gameId, playerCount;

    private String name, beschrijving;

    public int getGameId() {
        return gameId;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setBeschrijving(String beschrijving) {
        this.beschrijving = beschrijving;
    }

    public void setGameId(int gameId) {
        this.gameId = gameId;
    }

    //Nieuw spel starten met aantal spelers met standaard UNO-deck. 
    public UnoGame(int nPlayers, int id, String name, String description) {
        deck = new ArrayList<Card>();
        this.name = "UNO game";
        this.beschrijving = "Een korte beschrijving";
        this.name = name;
        this.beschrijving = description;
        this.players = new ArrayList<>();

        //Deck vullen met alle kaarten. 
        for (int c = 1; c <= 4; c++) {
            deck.add(new Card(c, 0));
            deck.add(new SkipCard(c, 1));
            deck.add(new SkipCard(c, 1));
            deck.add(new ReverseCard(c));
            deck.add(new ReverseCard(c));
            deck.add(new DrawCard(c, 2));
            deck.add(new DrawCard(c, 2));
            deck.add(new WildDrawCard(4));
            deck.add(new WildCard());

            for (int i = 1; i <= 9; i++) {
            	deck.add(new Card(c, i));
            	deck.add(new Card(c, i));
            }
        }
        Collections.shuffle(deck);

        // Pile is initially empty;
        pile = new ArrayList<Card>();
        players = new ArrayList<Player>();

        this.gameId = id;
        this.playerCount = nPlayers;

    }

    public Player getNextPlayer(int skip) {
        int i = currentPlayer + (skip * myPlayDirection);
        i = i % players.size();
        if (i < 0) {
            i += players.size();
        }

        return players.get(myPlayers.get(i));
    }

    public int getPlayDirection() {
        return myPlayDirection;
    }

    public void setPlayDirection(int dir) {
        myPlayDirection = dir;
    }

    public void goToNextPlayer() {
        currentPlayer = (currentPlayer + myPlayDirection + myPlayers.size()) % myPlayers.size();
    }

    public List<Card> draw(int nCards) {
        List<Card> cards = new ArrayList<>();
        for (int i = 0; i < nCards; i++) {
            if (myDeck.size() == 0 && myPile.size() > 0) {
                Card keep = myPile.get(0);
                myDeck.addAll(myPile.subList(1, myPile.size()));
                myPile.clear();
                myPile.add(keep);
                Collections.shuffle(myDeck);
            }
            cards.add(myDeck.remove(0));
        }
        return cards;
    }

    public void dealCards() throws RemoteException {

    	for (String player : myPlayers) {
            players.get(player).addCards(draw(7));
        }

        // turn over the top card
        Card card = myDeck.remove(0);
        myPile.add(0, card);

        for (gameControllerInterface temp : players.values()) {
            temp.cardPlayed(card);
        }

        currentPlayer = 0;
        myPlayDirection = 1;

    }

    //speel 1 beurt van het spel
    public String playTurn() throws RemoteException {
        String player = getCurrentClient();

        // the current player chooses a card to play
        Card card = players.get(player).getCard();
        if (card == null) {
            // they cannot play, so draw a card
        	players.get(player).addCards(draw(1));
        } else {
            // play the card
            myPile.add(0, card);
            for (gameControllerInterface temp : players.values()) {
                temp.addPile(card);
            }
            card.play(this);
        }

        // If that was their last card, then they win
        if (players.get(player).getCards().size() == 0) {
            return player;
        }

        // Go on to the next player
        goToNextPlayer();
        System.out.println();
        return null;
    }

    //speel een volledig spel en geef identiteit van winnaar terug
    public String play() throws RemoteException {
    	
        dealCards();
        String winner = playTurn();
        while (winner== null) {
        	winner = playTurn();
        }
        return winner;
    }

    public int getId() {
        return this.gameId;
    }

    public void draw(gameControllerInterface nextPlayer, int nDraw) throws RemoteException {
        nextPlayer.addCards(draw(nDraw));
    }

    public String getName() {
        return this.name;
    }

    public String getBeschrijving() {
        return this.beschrijving;
    }

	public void addPlayer(String username, gameControllerInterface gameController) throws RemoteException {
		players.put(username, gameController);
        if (players.size() == playerCount) {
        	this.play();
        }
	}

	public void sendMsg(String msg) throws RemoteException {
		for (gameControllerInterface player : players.values()) {
			player.setMsg(msg);
		}
		
	}


    /**
     * Reset the game. Gather all cards into the deck and shuffle.
     */
//    public void reset() {
//        myDeck.addAll(myPile);
//        myPile.clear();
//        for (Player p : myPlayers) {
//            myDeck.addAll(p.getCards());
//            p.clearCards();
//        }
//        Collections.shuffle(myDeck);
//    }
}

class Player {
	String name;
	gameControllerInterface gameController;
	List<Card> cards;
	int score;
}
